// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	v2 "github.com/amikos-tech/chroma-go/pkg/api/v2"
	mock "github.com/stretchr/testify/mock"
)

// MockCollection is an autogenerated mock type for the Collection type
type MockCollection struct {
	mock.Mock
}

type MockCollection_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCollection) EXPECT() *MockCollection_Expecter {
	return &MockCollection_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: ctx, opts
func (_m *MockCollection) Add(ctx context.Context, opts ...v2.CollectionUpdateOption) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ...v2.CollectionUpdateOption) error); ok {
		r0 = rf(ctx, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCollection_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type MockCollection_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - ctx context.Context
//   - opts ...v2.CollectionUpdateOption
func (_e *MockCollection_Expecter) Add(ctx interface{}, opts ...interface{}) *MockCollection_Add_Call {
	return &MockCollection_Add_Call{Call: _e.mock.On("Add",
		append([]interface{}{ctx}, opts...)...)}
}

func (_c *MockCollection_Add_Call) Run(run func(ctx context.Context, opts ...v2.CollectionUpdateOption)) *MockCollection_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]v2.CollectionUpdateOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(v2.CollectionUpdateOption)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockCollection_Add_Call) Return(_a0 error) *MockCollection_Add_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCollection_Add_Call) RunAndReturn(run func(context.Context, ...v2.CollectionUpdateOption) error) *MockCollection_Add_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function with no fields
func (_m *MockCollection) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCollection_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockCollection_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockCollection_Expecter) Close() *MockCollection_Close_Call {
	return &MockCollection_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockCollection_Close_Call) Run(run func()) *MockCollection_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCollection_Close_Call) Return(_a0 error) *MockCollection_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCollection_Close_Call) RunAndReturn(run func() error) *MockCollection_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Configuration provides a mock function with no fields
func (_m *MockCollection) Configuration() v2.CollectionConfiguration {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Configuration")
	}

	var r0 v2.CollectionConfiguration
	if rf, ok := ret.Get(0).(func() v2.CollectionConfiguration); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v2.CollectionConfiguration)
		}
	}

	return r0
}

// MockCollection_Configuration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Configuration'
type MockCollection_Configuration_Call struct {
	*mock.Call
}

// Configuration is a helper method to define mock.On call
func (_e *MockCollection_Expecter) Configuration() *MockCollection_Configuration_Call {
	return &MockCollection_Configuration_Call{Call: _e.mock.On("Configuration")}
}

func (_c *MockCollection_Configuration_Call) Run(run func()) *MockCollection_Configuration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCollection_Configuration_Call) Return(_a0 v2.CollectionConfiguration) *MockCollection_Configuration_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCollection_Configuration_Call) RunAndReturn(run func() v2.CollectionConfiguration) *MockCollection_Configuration_Call {
	_c.Call.Return(run)
	return _c
}

// Count provides a mock function with given fields: ctx
func (_m *MockCollection) Count(ctx context.Context) (int, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Count")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (int, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) int); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCollection_Count_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Count'
type MockCollection_Count_Call struct {
	*mock.Call
}

// Count is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockCollection_Expecter) Count(ctx interface{}) *MockCollection_Count_Call {
	return &MockCollection_Count_Call{Call: _e.mock.On("Count", ctx)}
}

func (_c *MockCollection_Count_Call) Run(run func(ctx context.Context)) *MockCollection_Count_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockCollection_Count_Call) Return(_a0 int, _a1 error) *MockCollection_Count_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCollection_Count_Call) RunAndReturn(run func(context.Context) (int, error)) *MockCollection_Count_Call {
	_c.Call.Return(run)
	return _c
}

// Database provides a mock function with no fields
func (_m *MockCollection) Database() v2.Database {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Database")
	}

	var r0 v2.Database
	if rf, ok := ret.Get(0).(func() v2.Database); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v2.Database)
		}
	}

	return r0
}

// MockCollection_Database_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Database'
type MockCollection_Database_Call struct {
	*mock.Call
}

// Database is a helper method to define mock.On call
func (_e *MockCollection_Expecter) Database() *MockCollection_Database_Call {
	return &MockCollection_Database_Call{Call: _e.mock.On("Database")}
}

func (_c *MockCollection_Database_Call) Run(run func()) *MockCollection_Database_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCollection_Database_Call) Return(_a0 v2.Database) *MockCollection_Database_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCollection_Database_Call) RunAndReturn(run func() v2.Database) *MockCollection_Database_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, opts
func (_m *MockCollection) Delete(ctx context.Context, opts ...v2.CollectionDeleteOption) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ...v2.CollectionDeleteOption) error); ok {
		r0 = rf(ctx, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCollection_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockCollection_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - opts ...v2.CollectionDeleteOption
func (_e *MockCollection_Expecter) Delete(ctx interface{}, opts ...interface{}) *MockCollection_Delete_Call {
	return &MockCollection_Delete_Call{Call: _e.mock.On("Delete",
		append([]interface{}{ctx}, opts...)...)}
}

func (_c *MockCollection_Delete_Call) Run(run func(ctx context.Context, opts ...v2.CollectionDeleteOption)) *MockCollection_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]v2.CollectionDeleteOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(v2.CollectionDeleteOption)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockCollection_Delete_Call) Return(_a0 error) *MockCollection_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCollection_Delete_Call) RunAndReturn(run func(context.Context, ...v2.CollectionDeleteOption) error) *MockCollection_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, opts
func (_m *MockCollection) Get(ctx context.Context, opts ...v2.CollectionGetOption) (v2.GetResult, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 v2.GetResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...v2.CollectionGetOption) (v2.GetResult, error)); ok {
		return rf(ctx, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...v2.CollectionGetOption) v2.GetResult); ok {
		r0 = rf(ctx, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v2.GetResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...v2.CollectionGetOption) error); ok {
		r1 = rf(ctx, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCollection_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockCollection_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - opts ...v2.CollectionGetOption
func (_e *MockCollection_Expecter) Get(ctx interface{}, opts ...interface{}) *MockCollection_Get_Call {
	return &MockCollection_Get_Call{Call: _e.mock.On("Get",
		append([]interface{}{ctx}, opts...)...)}
}

func (_c *MockCollection_Get_Call) Run(run func(ctx context.Context, opts ...v2.CollectionGetOption)) *MockCollection_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]v2.CollectionGetOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(v2.CollectionGetOption)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockCollection_Get_Call) Return(_a0 v2.GetResult, _a1 error) *MockCollection_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCollection_Get_Call) RunAndReturn(run func(context.Context, ...v2.CollectionGetOption) (v2.GetResult, error)) *MockCollection_Get_Call {
	_c.Call.Return(run)
	return _c
}

// ID provides a mock function with no fields
func (_m *MockCollection) ID() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ID")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockCollection_ID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ID'
type MockCollection_ID_Call struct {
	*mock.Call
}

// ID is a helper method to define mock.On call
func (_e *MockCollection_Expecter) ID() *MockCollection_ID_Call {
	return &MockCollection_ID_Call{Call: _e.mock.On("ID")}
}

func (_c *MockCollection_ID_Call) Run(run func()) *MockCollection_ID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCollection_ID_Call) Return(_a0 string) *MockCollection_ID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCollection_ID_Call) RunAndReturn(run func() string) *MockCollection_ID_Call {
	_c.Call.Return(run)
	return _c
}

// Metadata provides a mock function with no fields
func (_m *MockCollection) Metadata() v2.CollectionMetadata {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Metadata")
	}

	var r0 v2.CollectionMetadata
	if rf, ok := ret.Get(0).(func() v2.CollectionMetadata); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v2.CollectionMetadata)
		}
	}

	return r0
}

// MockCollection_Metadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Metadata'
type MockCollection_Metadata_Call struct {
	*mock.Call
}

// Metadata is a helper method to define mock.On call
func (_e *MockCollection_Expecter) Metadata() *MockCollection_Metadata_Call {
	return &MockCollection_Metadata_Call{Call: _e.mock.On("Metadata")}
}

func (_c *MockCollection_Metadata_Call) Run(run func()) *MockCollection_Metadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCollection_Metadata_Call) Return(_a0 v2.CollectionMetadata) *MockCollection_Metadata_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCollection_Metadata_Call) RunAndReturn(run func() v2.CollectionMetadata) *MockCollection_Metadata_Call {
	_c.Call.Return(run)
	return _c
}

// ModifyConfiguration provides a mock function with given fields: ctx, newConfig
func (_m *MockCollection) ModifyConfiguration(ctx context.Context, newConfig v2.CollectionConfiguration) error {
	ret := _m.Called(ctx, newConfig)

	if len(ret) == 0 {
		panic("no return value specified for ModifyConfiguration")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, v2.CollectionConfiguration) error); ok {
		r0 = rf(ctx, newConfig)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCollection_ModifyConfiguration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ModifyConfiguration'
type MockCollection_ModifyConfiguration_Call struct {
	*mock.Call
}

// ModifyConfiguration is a helper method to define mock.On call
//   - ctx context.Context
//   - newConfig v2.CollectionConfiguration
func (_e *MockCollection_Expecter) ModifyConfiguration(ctx interface{}, newConfig interface{}) *MockCollection_ModifyConfiguration_Call {
	return &MockCollection_ModifyConfiguration_Call{Call: _e.mock.On("ModifyConfiguration", ctx, newConfig)}
}

func (_c *MockCollection_ModifyConfiguration_Call) Run(run func(ctx context.Context, newConfig v2.CollectionConfiguration)) *MockCollection_ModifyConfiguration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(v2.CollectionConfiguration))
	})
	return _c
}

func (_c *MockCollection_ModifyConfiguration_Call) Return(_a0 error) *MockCollection_ModifyConfiguration_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCollection_ModifyConfiguration_Call) RunAndReturn(run func(context.Context, v2.CollectionConfiguration) error) *MockCollection_ModifyConfiguration_Call {
	_c.Call.Return(run)
	return _c
}

// ModifyMetadata provides a mock function with given fields: ctx, newMetadata
func (_m *MockCollection) ModifyMetadata(ctx context.Context, newMetadata v2.CollectionMetadata) error {
	ret := _m.Called(ctx, newMetadata)

	if len(ret) == 0 {
		panic("no return value specified for ModifyMetadata")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, v2.CollectionMetadata) error); ok {
		r0 = rf(ctx, newMetadata)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCollection_ModifyMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ModifyMetadata'
type MockCollection_ModifyMetadata_Call struct {
	*mock.Call
}

// ModifyMetadata is a helper method to define mock.On call
//   - ctx context.Context
//   - newMetadata v2.CollectionMetadata
func (_e *MockCollection_Expecter) ModifyMetadata(ctx interface{}, newMetadata interface{}) *MockCollection_ModifyMetadata_Call {
	return &MockCollection_ModifyMetadata_Call{Call: _e.mock.On("ModifyMetadata", ctx, newMetadata)}
}

func (_c *MockCollection_ModifyMetadata_Call) Run(run func(ctx context.Context, newMetadata v2.CollectionMetadata)) *MockCollection_ModifyMetadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(v2.CollectionMetadata))
	})
	return _c
}

func (_c *MockCollection_ModifyMetadata_Call) Return(_a0 error) *MockCollection_ModifyMetadata_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCollection_ModifyMetadata_Call) RunAndReturn(run func(context.Context, v2.CollectionMetadata) error) *MockCollection_ModifyMetadata_Call {
	_c.Call.Return(run)
	return _c
}

// ModifyName provides a mock function with given fields: ctx, newName
func (_m *MockCollection) ModifyName(ctx context.Context, newName string) error {
	ret := _m.Called(ctx, newName)

	if len(ret) == 0 {
		panic("no return value specified for ModifyName")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, newName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCollection_ModifyName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ModifyName'
type MockCollection_ModifyName_Call struct {
	*mock.Call
}

// ModifyName is a helper method to define mock.On call
//   - ctx context.Context
//   - newName string
func (_e *MockCollection_Expecter) ModifyName(ctx interface{}, newName interface{}) *MockCollection_ModifyName_Call {
	return &MockCollection_ModifyName_Call{Call: _e.mock.On("ModifyName", ctx, newName)}
}

func (_c *MockCollection_ModifyName_Call) Run(run func(ctx context.Context, newName string)) *MockCollection_ModifyName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockCollection_ModifyName_Call) Return(_a0 error) *MockCollection_ModifyName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCollection_ModifyName_Call) RunAndReturn(run func(context.Context, string) error) *MockCollection_ModifyName_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with no fields
func (_m *MockCollection) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockCollection_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockCollection_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockCollection_Expecter) Name() *MockCollection_Name_Call {
	return &MockCollection_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockCollection_Name_Call) Run(run func()) *MockCollection_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCollection_Name_Call) Return(_a0 string) *MockCollection_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCollection_Name_Call) RunAndReturn(run func() string) *MockCollection_Name_Call {
	_c.Call.Return(run)
	return _c
}

// Query provides a mock function with given fields: ctx, opts
func (_m *MockCollection) Query(ctx context.Context, opts ...v2.CollectionQueryOption) (v2.QueryResult, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Query")
	}

	var r0 v2.QueryResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...v2.CollectionQueryOption) (v2.QueryResult, error)); ok {
		return rf(ctx, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...v2.CollectionQueryOption) v2.QueryResult); ok {
		r0 = rf(ctx, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v2.QueryResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...v2.CollectionQueryOption) error); ok {
		r1 = rf(ctx, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCollection_Query_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Query'
type MockCollection_Query_Call struct {
	*mock.Call
}

// Query is a helper method to define mock.On call
//   - ctx context.Context
//   - opts ...v2.CollectionQueryOption
func (_e *MockCollection_Expecter) Query(ctx interface{}, opts ...interface{}) *MockCollection_Query_Call {
	return &MockCollection_Query_Call{Call: _e.mock.On("Query",
		append([]interface{}{ctx}, opts...)...)}
}

func (_c *MockCollection_Query_Call) Run(run func(ctx context.Context, opts ...v2.CollectionQueryOption)) *MockCollection_Query_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]v2.CollectionQueryOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(v2.CollectionQueryOption)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockCollection_Query_Call) Return(_a0 v2.QueryResult, _a1 error) *MockCollection_Query_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCollection_Query_Call) RunAndReturn(run func(context.Context, ...v2.CollectionQueryOption) (v2.QueryResult, error)) *MockCollection_Query_Call {
	_c.Call.Return(run)
	return _c
}

// Tenant provides a mock function with no fields
func (_m *MockCollection) Tenant() v2.Tenant {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Tenant")
	}

	var r0 v2.Tenant
	if rf, ok := ret.Get(0).(func() v2.Tenant); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v2.Tenant)
		}
	}

	return r0
}

// MockCollection_Tenant_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Tenant'
type MockCollection_Tenant_Call struct {
	*mock.Call
}

// Tenant is a helper method to define mock.On call
func (_e *MockCollection_Expecter) Tenant() *MockCollection_Tenant_Call {
	return &MockCollection_Tenant_Call{Call: _e.mock.On("Tenant")}
}

func (_c *MockCollection_Tenant_Call) Run(run func()) *MockCollection_Tenant_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCollection_Tenant_Call) Return(_a0 v2.Tenant) *MockCollection_Tenant_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCollection_Tenant_Call) RunAndReturn(run func() v2.Tenant) *MockCollection_Tenant_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, opts
func (_m *MockCollection) Update(ctx context.Context, opts ...v2.CollectionUpdateOption) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ...v2.CollectionUpdateOption) error); ok {
		r0 = rf(ctx, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCollection_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockCollection_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - opts ...v2.CollectionUpdateOption
func (_e *MockCollection_Expecter) Update(ctx interface{}, opts ...interface{}) *MockCollection_Update_Call {
	return &MockCollection_Update_Call{Call: _e.mock.On("Update",
		append([]interface{}{ctx}, opts...)...)}
}

func (_c *MockCollection_Update_Call) Run(run func(ctx context.Context, opts ...v2.CollectionUpdateOption)) *MockCollection_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]v2.CollectionUpdateOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(v2.CollectionUpdateOption)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockCollection_Update_Call) Return(_a0 error) *MockCollection_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCollection_Update_Call) RunAndReturn(run func(context.Context, ...v2.CollectionUpdateOption) error) *MockCollection_Update_Call {
	_c.Call.Return(run)
	return _c
}

// Upsert provides a mock function with given fields: ctx, opts
func (_m *MockCollection) Upsert(ctx context.Context, opts ...v2.CollectionUpdateOption) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Upsert")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ...v2.CollectionUpdateOption) error); ok {
		r0 = rf(ctx, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCollection_Upsert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Upsert'
type MockCollection_Upsert_Call struct {
	*mock.Call
}

// Upsert is a helper method to define mock.On call
//   - ctx context.Context
//   - opts ...v2.CollectionUpdateOption
func (_e *MockCollection_Expecter) Upsert(ctx interface{}, opts ...interface{}) *MockCollection_Upsert_Call {
	return &MockCollection_Upsert_Call{Call: _e.mock.On("Upsert",
		append([]interface{}{ctx}, opts...)...)}
}

func (_c *MockCollection_Upsert_Call) Run(run func(ctx context.Context, opts ...v2.CollectionUpdateOption)) *MockCollection_Upsert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]v2.CollectionUpdateOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(v2.CollectionUpdateOption)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockCollection_Upsert_Call) Return(_a0 error) *MockCollection_Upsert_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCollection_Upsert_Call) RunAndReturn(run func(context.Context, ...v2.CollectionUpdateOption) error) *MockCollection_Upsert_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCollection creates a new instance of MockCollection. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCollection(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCollection {
	mock := &MockCollection{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
