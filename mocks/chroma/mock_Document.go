// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// MockDocument is an autogenerated mock type for the Document type
type MockDocument struct {
	mock.Mock
}

type MockDocument_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDocument) EXPECT() *MockDocument_Expecter {
	return &MockDocument_Expecter{mock: &_m.Mock}
}

// ContentRaw provides a mock function with no fields
func (_m *MockDocument) ContentRaw() []byte {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ContentRaw")
	}

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// MockDocument_ContentRaw_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContentRaw'
type MockDocument_ContentRaw_Call struct {
	*mock.Call
}

// ContentRaw is a helper method to define mock.On call
func (_e *MockDocument_Expecter) ContentRaw() *MockDocument_ContentRaw_Call {
	return &MockDocument_ContentRaw_Call{Call: _e.mock.On("ContentRaw")}
}

func (_c *MockDocument_ContentRaw_Call) Run(run func()) *MockDocument_ContentRaw_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDocument_ContentRaw_Call) Return(_a0 []byte) *MockDocument_ContentRaw_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDocument_ContentRaw_Call) RunAndReturn(run func() []byte) *MockDocument_ContentRaw_Call {
	_c.Call.Return(run)
	return _c
}

// ContentString provides a mock function with no fields
func (_m *MockDocument) ContentString() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ContentString")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockDocument_ContentString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContentString'
type MockDocument_ContentString_Call struct {
	*mock.Call
}

// ContentString is a helper method to define mock.On call
func (_e *MockDocument_Expecter) ContentString() *MockDocument_ContentString_Call {
	return &MockDocument_ContentString_Call{Call: _e.mock.On("ContentString")}
}

func (_c *MockDocument_ContentString_Call) Run(run func()) *MockDocument_ContentString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDocument_ContentString_Call) Return(_a0 string) *MockDocument_ContentString_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDocument_ContentString_Call) RunAndReturn(run func() string) *MockDocument_ContentString_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDocument creates a new instance of MockDocument. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDocument(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDocument {
	mock := &MockDocument{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
