// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// MockDocumentMetadata is an autogenerated mock type for the DocumentMetadata type
type MockDocumentMetadata struct {
	mock.Mock
}

type MockDocumentMetadata_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDocumentMetadata) EXPECT() *MockDocumentMetadata_Expecter {
	return &MockDocumentMetadata_Expecter{mock: &_m.Mock}
}

// GetBool provides a mock function with given fields: key
func (_m *MockDocumentMetadata) GetBool(key string) (bool, bool) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetBool")
	}

	var r0 bool
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) (bool, bool)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockDocumentMetadata_GetBool_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBool'
type MockDocumentMetadata_GetBool_Call struct {
	*mock.Call
}

// GetBool is a helper method to define mock.On call
//   - key string
func (_e *MockDocumentMetadata_Expecter) GetBool(key interface{}) *MockDocumentMetadata_GetBool_Call {
	return &MockDocumentMetadata_GetBool_Call{Call: _e.mock.On("GetBool", key)}
}

func (_c *MockDocumentMetadata_GetBool_Call) Run(run func(key string)) *MockDocumentMetadata_GetBool_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockDocumentMetadata_GetBool_Call) Return(_a0 bool, _a1 bool) *MockDocumentMetadata_GetBool_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDocumentMetadata_GetBool_Call) RunAndReturn(run func(string) (bool, bool)) *MockDocumentMetadata_GetBool_Call {
	_c.Call.Return(run)
	return _c
}

// GetFloat provides a mock function with given fields: key
func (_m *MockDocumentMetadata) GetFloat(key string) (float64, bool) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetFloat")
	}

	var r0 float64
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) (float64, bool)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) float64); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockDocumentMetadata_GetFloat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFloat'
type MockDocumentMetadata_GetFloat_Call struct {
	*mock.Call
}

// GetFloat is a helper method to define mock.On call
//   - key string
func (_e *MockDocumentMetadata_Expecter) GetFloat(key interface{}) *MockDocumentMetadata_GetFloat_Call {
	return &MockDocumentMetadata_GetFloat_Call{Call: _e.mock.On("GetFloat", key)}
}

func (_c *MockDocumentMetadata_GetFloat_Call) Run(run func(key string)) *MockDocumentMetadata_GetFloat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockDocumentMetadata_GetFloat_Call) Return(_a0 float64, _a1 bool) *MockDocumentMetadata_GetFloat_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDocumentMetadata_GetFloat_Call) RunAndReturn(run func(string) (float64, bool)) *MockDocumentMetadata_GetFloat_Call {
	_c.Call.Return(run)
	return _c
}

// GetInt provides a mock function with given fields: key
func (_m *MockDocumentMetadata) GetInt(key string) (int64, bool) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetInt")
	}

	var r0 int64
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) (int64, bool)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) int64); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockDocumentMetadata_GetInt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInt'
type MockDocumentMetadata_GetInt_Call struct {
	*mock.Call
}

// GetInt is a helper method to define mock.On call
//   - key string
func (_e *MockDocumentMetadata_Expecter) GetInt(key interface{}) *MockDocumentMetadata_GetInt_Call {
	return &MockDocumentMetadata_GetInt_Call{Call: _e.mock.On("GetInt", key)}
}

func (_c *MockDocumentMetadata_GetInt_Call) Run(run func(key string)) *MockDocumentMetadata_GetInt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockDocumentMetadata_GetInt_Call) Return(_a0 int64, _a1 bool) *MockDocumentMetadata_GetInt_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDocumentMetadata_GetInt_Call) RunAndReturn(run func(string) (int64, bool)) *MockDocumentMetadata_GetInt_Call {
	_c.Call.Return(run)
	return _c
}

// GetRaw provides a mock function with given fields: key
func (_m *MockDocumentMetadata) GetRaw(key string) (interface{}, bool) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetRaw")
	}

	var r0 interface{}
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) (interface{}, bool)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) interface{}); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockDocumentMetadata_GetRaw_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRaw'
type MockDocumentMetadata_GetRaw_Call struct {
	*mock.Call
}

// GetRaw is a helper method to define mock.On call
//   - key string
func (_e *MockDocumentMetadata_Expecter) GetRaw(key interface{}) *MockDocumentMetadata_GetRaw_Call {
	return &MockDocumentMetadata_GetRaw_Call{Call: _e.mock.On("GetRaw", key)}
}

func (_c *MockDocumentMetadata_GetRaw_Call) Run(run func(key string)) *MockDocumentMetadata_GetRaw_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockDocumentMetadata_GetRaw_Call) Return(_a0 interface{}, _a1 bool) *MockDocumentMetadata_GetRaw_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDocumentMetadata_GetRaw_Call) RunAndReturn(run func(string) (interface{}, bool)) *MockDocumentMetadata_GetRaw_Call {
	_c.Call.Return(run)
	return _c
}

// GetString provides a mock function with given fields: key
func (_m *MockDocumentMetadata) GetString(key string) (string, bool) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetString")
	}

	var r0 string
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) (string, bool)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockDocumentMetadata_GetString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetString'
type MockDocumentMetadata_GetString_Call struct {
	*mock.Call
}

// GetString is a helper method to define mock.On call
//   - key string
func (_e *MockDocumentMetadata_Expecter) GetString(key interface{}) *MockDocumentMetadata_GetString_Call {
	return &MockDocumentMetadata_GetString_Call{Call: _e.mock.On("GetString", key)}
}

func (_c *MockDocumentMetadata_GetString_Call) Run(run func(key string)) *MockDocumentMetadata_GetString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockDocumentMetadata_GetString_Call) Return(_a0 string, _a1 bool) *MockDocumentMetadata_GetString_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDocumentMetadata_GetString_Call) RunAndReturn(run func(string) (string, bool)) *MockDocumentMetadata_GetString_Call {
	_c.Call.Return(run)
	return _c
}

// SetBool provides a mock function with given fields: key, value
func (_m *MockDocumentMetadata) SetBool(key string, value bool) {
	_m.Called(key, value)
}

// MockDocumentMetadata_SetBool_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetBool'
type MockDocumentMetadata_SetBool_Call struct {
	*mock.Call
}

// SetBool is a helper method to define mock.On call
//   - key string
//   - value bool
func (_e *MockDocumentMetadata_Expecter) SetBool(key interface{}, value interface{}) *MockDocumentMetadata_SetBool_Call {
	return &MockDocumentMetadata_SetBool_Call{Call: _e.mock.On("SetBool", key, value)}
}

func (_c *MockDocumentMetadata_SetBool_Call) Run(run func(key string, value bool)) *MockDocumentMetadata_SetBool_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(bool))
	})
	return _c
}

func (_c *MockDocumentMetadata_SetBool_Call) Return() *MockDocumentMetadata_SetBool_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockDocumentMetadata_SetBool_Call) RunAndReturn(run func(string, bool)) *MockDocumentMetadata_SetBool_Call {
	_c.Run(run)
	return _c
}

// SetFloat provides a mock function with given fields: key, value
func (_m *MockDocumentMetadata) SetFloat(key string, value float64) {
	_m.Called(key, value)
}

// MockDocumentMetadata_SetFloat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetFloat'
type MockDocumentMetadata_SetFloat_Call struct {
	*mock.Call
}

// SetFloat is a helper method to define mock.On call
//   - key string
//   - value float64
func (_e *MockDocumentMetadata_Expecter) SetFloat(key interface{}, value interface{}) *MockDocumentMetadata_SetFloat_Call {
	return &MockDocumentMetadata_SetFloat_Call{Call: _e.mock.On("SetFloat", key, value)}
}

func (_c *MockDocumentMetadata_SetFloat_Call) Run(run func(key string, value float64)) *MockDocumentMetadata_SetFloat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(float64))
	})
	return _c
}

func (_c *MockDocumentMetadata_SetFloat_Call) Return() *MockDocumentMetadata_SetFloat_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockDocumentMetadata_SetFloat_Call) RunAndReturn(run func(string, float64)) *MockDocumentMetadata_SetFloat_Call {
	_c.Run(run)
	return _c
}

// SetInt provides a mock function with given fields: key, value
func (_m *MockDocumentMetadata) SetInt(key string, value int64) {
	_m.Called(key, value)
}

// MockDocumentMetadata_SetInt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetInt'
type MockDocumentMetadata_SetInt_Call struct {
	*mock.Call
}

// SetInt is a helper method to define mock.On call
//   - key string
//   - value int64
func (_e *MockDocumentMetadata_Expecter) SetInt(key interface{}, value interface{}) *MockDocumentMetadata_SetInt_Call {
	return &MockDocumentMetadata_SetInt_Call{Call: _e.mock.On("SetInt", key, value)}
}

func (_c *MockDocumentMetadata_SetInt_Call) Run(run func(key string, value int64)) *MockDocumentMetadata_SetInt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int64))
	})
	return _c
}

func (_c *MockDocumentMetadata_SetInt_Call) Return() *MockDocumentMetadata_SetInt_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockDocumentMetadata_SetInt_Call) RunAndReturn(run func(string, int64)) *MockDocumentMetadata_SetInt_Call {
	_c.Run(run)
	return _c
}

// SetRaw provides a mock function with given fields: key, value
func (_m *MockDocumentMetadata) SetRaw(key string, value interface{}) {
	_m.Called(key, value)
}

// MockDocumentMetadata_SetRaw_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetRaw'
type MockDocumentMetadata_SetRaw_Call struct {
	*mock.Call
}

// SetRaw is a helper method to define mock.On call
//   - key string
//   - value interface{}
func (_e *MockDocumentMetadata_Expecter) SetRaw(key interface{}, value interface{}) *MockDocumentMetadata_SetRaw_Call {
	return &MockDocumentMetadata_SetRaw_Call{Call: _e.mock.On("SetRaw", key, value)}
}

func (_c *MockDocumentMetadata_SetRaw_Call) Run(run func(key string, value interface{})) *MockDocumentMetadata_SetRaw_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(interface{}))
	})
	return _c
}

func (_c *MockDocumentMetadata_SetRaw_Call) Return() *MockDocumentMetadata_SetRaw_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockDocumentMetadata_SetRaw_Call) RunAndReturn(run func(string, interface{})) *MockDocumentMetadata_SetRaw_Call {
	_c.Run(run)
	return _c
}

// SetString provides a mock function with given fields: key, value
func (_m *MockDocumentMetadata) SetString(key string, value string) {
	_m.Called(key, value)
}

// MockDocumentMetadata_SetString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetString'
type MockDocumentMetadata_SetString_Call struct {
	*mock.Call
}

// SetString is a helper method to define mock.On call
//   - key string
//   - value string
func (_e *MockDocumentMetadata_Expecter) SetString(key interface{}, value interface{}) *MockDocumentMetadata_SetString_Call {
	return &MockDocumentMetadata_SetString_Call{Call: _e.mock.On("SetString", key, value)}
}

func (_c *MockDocumentMetadata_SetString_Call) Run(run func(key string, value string)) *MockDocumentMetadata_SetString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockDocumentMetadata_SetString_Call) Return() *MockDocumentMetadata_SetString_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockDocumentMetadata_SetString_Call) RunAndReturn(run func(string, string)) *MockDocumentMetadata_SetString_Call {
	_c.Run(run)
	return _c
}

// NewMockDocumentMetadata creates a new instance of MockDocumentMetadata. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDocumentMetadata(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDocumentMetadata {
	mock := &MockDocumentMetadata{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
