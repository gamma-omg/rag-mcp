// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	embeddings "github.com/amikos-tech/chroma-go/pkg/embeddings"
	mock "github.com/stretchr/testify/mock"

	v2 "github.com/amikos-tech/chroma-go/pkg/api/v2"
)

// MockGetResult is an autogenerated mock type for the GetResult type
type MockGetResult struct {
	mock.Mock
}

type MockGetResult_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGetResult) EXPECT() *MockGetResult_Expecter {
	return &MockGetResult_Expecter{mock: &_m.Mock}
}

// Count provides a mock function with no fields
func (_m *MockGetResult) Count() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Count")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MockGetResult_Count_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Count'
type MockGetResult_Count_Call struct {
	*mock.Call
}

// Count is a helper method to define mock.On call
func (_e *MockGetResult_Expecter) Count() *MockGetResult_Count_Call {
	return &MockGetResult_Count_Call{Call: _e.mock.On("Count")}
}

func (_c *MockGetResult_Count_Call) Run(run func()) *MockGetResult_Count_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockGetResult_Count_Call) Return(_a0 int) *MockGetResult_Count_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGetResult_Count_Call) RunAndReturn(run func() int) *MockGetResult_Count_Call {
	_c.Call.Return(run)
	return _c
}

// GetDocuments provides a mock function with no fields
func (_m *MockGetResult) GetDocuments() v2.Documents {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDocuments")
	}

	var r0 v2.Documents
	if rf, ok := ret.Get(0).(func() v2.Documents); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v2.Documents)
		}
	}

	return r0
}

// MockGetResult_GetDocuments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDocuments'
type MockGetResult_GetDocuments_Call struct {
	*mock.Call
}

// GetDocuments is a helper method to define mock.On call
func (_e *MockGetResult_Expecter) GetDocuments() *MockGetResult_GetDocuments_Call {
	return &MockGetResult_GetDocuments_Call{Call: _e.mock.On("GetDocuments")}
}

func (_c *MockGetResult_GetDocuments_Call) Run(run func()) *MockGetResult_GetDocuments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockGetResult_GetDocuments_Call) Return(_a0 v2.Documents) *MockGetResult_GetDocuments_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGetResult_GetDocuments_Call) RunAndReturn(run func() v2.Documents) *MockGetResult_GetDocuments_Call {
	_c.Call.Return(run)
	return _c
}

// GetEmbeddings provides a mock function with no fields
func (_m *MockGetResult) GetEmbeddings() embeddings.Embeddings {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetEmbeddings")
	}

	var r0 embeddings.Embeddings
	if rf, ok := ret.Get(0).(func() embeddings.Embeddings); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(embeddings.Embeddings)
		}
	}

	return r0
}

// MockGetResult_GetEmbeddings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEmbeddings'
type MockGetResult_GetEmbeddings_Call struct {
	*mock.Call
}

// GetEmbeddings is a helper method to define mock.On call
func (_e *MockGetResult_Expecter) GetEmbeddings() *MockGetResult_GetEmbeddings_Call {
	return &MockGetResult_GetEmbeddings_Call{Call: _e.mock.On("GetEmbeddings")}
}

func (_c *MockGetResult_GetEmbeddings_Call) Run(run func()) *MockGetResult_GetEmbeddings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockGetResult_GetEmbeddings_Call) Return(_a0 embeddings.Embeddings) *MockGetResult_GetEmbeddings_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGetResult_GetEmbeddings_Call) RunAndReturn(run func() embeddings.Embeddings) *MockGetResult_GetEmbeddings_Call {
	_c.Call.Return(run)
	return _c
}

// GetIDs provides a mock function with no fields
func (_m *MockGetResult) GetIDs() v2.DocumentIDs {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetIDs")
	}

	var r0 v2.DocumentIDs
	if rf, ok := ret.Get(0).(func() v2.DocumentIDs); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v2.DocumentIDs)
		}
	}

	return r0
}

// MockGetResult_GetIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIDs'
type MockGetResult_GetIDs_Call struct {
	*mock.Call
}

// GetIDs is a helper method to define mock.On call
func (_e *MockGetResult_Expecter) GetIDs() *MockGetResult_GetIDs_Call {
	return &MockGetResult_GetIDs_Call{Call: _e.mock.On("GetIDs")}
}

func (_c *MockGetResult_GetIDs_Call) Run(run func()) *MockGetResult_GetIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockGetResult_GetIDs_Call) Return(_a0 v2.DocumentIDs) *MockGetResult_GetIDs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGetResult_GetIDs_Call) RunAndReturn(run func() v2.DocumentIDs) *MockGetResult_GetIDs_Call {
	_c.Call.Return(run)
	return _c
}

// GetMetadatas provides a mock function with no fields
func (_m *MockGetResult) GetMetadatas() v2.DocumentMetadatas {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetMetadatas")
	}

	var r0 v2.DocumentMetadatas
	if rf, ok := ret.Get(0).(func() v2.DocumentMetadatas); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v2.DocumentMetadatas)
		}
	}

	return r0
}

// MockGetResult_GetMetadatas_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMetadatas'
type MockGetResult_GetMetadatas_Call struct {
	*mock.Call
}

// GetMetadatas is a helper method to define mock.On call
func (_e *MockGetResult_Expecter) GetMetadatas() *MockGetResult_GetMetadatas_Call {
	return &MockGetResult_GetMetadatas_Call{Call: _e.mock.On("GetMetadatas")}
}

func (_c *MockGetResult_GetMetadatas_Call) Run(run func()) *MockGetResult_GetMetadatas_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockGetResult_GetMetadatas_Call) Return(_a0 v2.DocumentMetadatas) *MockGetResult_GetMetadatas_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGetResult_GetMetadatas_Call) RunAndReturn(run func() v2.DocumentMetadatas) *MockGetResult_GetMetadatas_Call {
	_c.Call.Return(run)
	return _c
}

// Next provides a mock function with no fields
func (_m *MockGetResult) Next() (v2.GetResult, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Next")
	}

	var r0 v2.GetResult
	var r1 error
	if rf, ok := ret.Get(0).(func() (v2.GetResult, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() v2.GetResult); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v2.GetResult)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGetResult_Next_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Next'
type MockGetResult_Next_Call struct {
	*mock.Call
}

// Next is a helper method to define mock.On call
func (_e *MockGetResult_Expecter) Next() *MockGetResult_Next_Call {
	return &MockGetResult_Next_Call{Call: _e.mock.On("Next")}
}

func (_c *MockGetResult_Next_Call) Run(run func()) *MockGetResult_Next_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockGetResult_Next_Call) Return(_a0 v2.GetResult, _a1 error) *MockGetResult_Next_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGetResult_Next_Call) RunAndReturn(run func() (v2.GetResult, error)) *MockGetResult_Next_Call {
	_c.Call.Return(run)
	return _c
}

// ToRecords provides a mock function with no fields
func (_m *MockGetResult) ToRecords() v2.Records {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ToRecords")
	}

	var r0 v2.Records
	if rf, ok := ret.Get(0).(func() v2.Records); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v2.Records)
		}
	}

	return r0
}

// MockGetResult_ToRecords_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ToRecords'
type MockGetResult_ToRecords_Call struct {
	*mock.Call
}

// ToRecords is a helper method to define mock.On call
func (_e *MockGetResult_Expecter) ToRecords() *MockGetResult_ToRecords_Call {
	return &MockGetResult_ToRecords_Call{Call: _e.mock.On("ToRecords")}
}

func (_c *MockGetResult_ToRecords_Call) Run(run func()) *MockGetResult_ToRecords_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockGetResult_ToRecords_Call) Return(_a0 v2.Records) *MockGetResult_ToRecords_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGetResult_ToRecords_Call) RunAndReturn(run func() v2.Records) *MockGetResult_ToRecords_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockGetResult creates a new instance of MockGetResult. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGetResult(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGetResult {
	mock := &MockGetResult{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
