// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	embeddings "github.com/amikos-tech/chroma-go/pkg/embeddings"
	mock "github.com/stretchr/testify/mock"

	v2 "github.com/amikos-tech/chroma-go/pkg/api/v2"
)

// MockQueryResult is an autogenerated mock type for the QueryResult type
type MockQueryResult struct {
	mock.Mock
}

type MockQueryResult_Expecter struct {
	mock *mock.Mock
}

func (_m *MockQueryResult) EXPECT() *MockQueryResult_Expecter {
	return &MockQueryResult_Expecter{mock: &_m.Mock}
}

// CountGroups provides a mock function with no fields
func (_m *MockQueryResult) CountGroups() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CountGroups")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MockQueryResult_CountGroups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountGroups'
type MockQueryResult_CountGroups_Call struct {
	*mock.Call
}

// CountGroups is a helper method to define mock.On call
func (_e *MockQueryResult_Expecter) CountGroups() *MockQueryResult_CountGroups_Call {
	return &MockQueryResult_CountGroups_Call{Call: _e.mock.On("CountGroups")}
}

func (_c *MockQueryResult_CountGroups_Call) Run(run func()) *MockQueryResult_CountGroups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockQueryResult_CountGroups_Call) Return(_a0 int) *MockQueryResult_CountGroups_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQueryResult_CountGroups_Call) RunAndReturn(run func() int) *MockQueryResult_CountGroups_Call {
	_c.Call.Return(run)
	return _c
}

// GetDistancesGroups provides a mock function with no fields
func (_m *MockQueryResult) GetDistancesGroups() []embeddings.Distances {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDistancesGroups")
	}

	var r0 []embeddings.Distances
	if rf, ok := ret.Get(0).(func() []embeddings.Distances); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]embeddings.Distances)
		}
	}

	return r0
}

// MockQueryResult_GetDistancesGroups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDistancesGroups'
type MockQueryResult_GetDistancesGroups_Call struct {
	*mock.Call
}

// GetDistancesGroups is a helper method to define mock.On call
func (_e *MockQueryResult_Expecter) GetDistancesGroups() *MockQueryResult_GetDistancesGroups_Call {
	return &MockQueryResult_GetDistancesGroups_Call{Call: _e.mock.On("GetDistancesGroups")}
}

func (_c *MockQueryResult_GetDistancesGroups_Call) Run(run func()) *MockQueryResult_GetDistancesGroups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockQueryResult_GetDistancesGroups_Call) Return(_a0 []embeddings.Distances) *MockQueryResult_GetDistancesGroups_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQueryResult_GetDistancesGroups_Call) RunAndReturn(run func() []embeddings.Distances) *MockQueryResult_GetDistancesGroups_Call {
	_c.Call.Return(run)
	return _c
}

// GetDocumentsGroups provides a mock function with no fields
func (_m *MockQueryResult) GetDocumentsGroups() []v2.Documents {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDocumentsGroups")
	}

	var r0 []v2.Documents
	if rf, ok := ret.Get(0).(func() []v2.Documents); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]v2.Documents)
		}
	}

	return r0
}

// MockQueryResult_GetDocumentsGroups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDocumentsGroups'
type MockQueryResult_GetDocumentsGroups_Call struct {
	*mock.Call
}

// GetDocumentsGroups is a helper method to define mock.On call
func (_e *MockQueryResult_Expecter) GetDocumentsGroups() *MockQueryResult_GetDocumentsGroups_Call {
	return &MockQueryResult_GetDocumentsGroups_Call{Call: _e.mock.On("GetDocumentsGroups")}
}

func (_c *MockQueryResult_GetDocumentsGroups_Call) Run(run func()) *MockQueryResult_GetDocumentsGroups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockQueryResult_GetDocumentsGroups_Call) Return(_a0 []v2.Documents) *MockQueryResult_GetDocumentsGroups_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQueryResult_GetDocumentsGroups_Call) RunAndReturn(run func() []v2.Documents) *MockQueryResult_GetDocumentsGroups_Call {
	_c.Call.Return(run)
	return _c
}

// GetEmbeddingsGroups provides a mock function with no fields
func (_m *MockQueryResult) GetEmbeddingsGroups() []embeddings.Embeddings {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetEmbeddingsGroups")
	}

	var r0 []embeddings.Embeddings
	if rf, ok := ret.Get(0).(func() []embeddings.Embeddings); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]embeddings.Embeddings)
		}
	}

	return r0
}

// MockQueryResult_GetEmbeddingsGroups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEmbeddingsGroups'
type MockQueryResult_GetEmbeddingsGroups_Call struct {
	*mock.Call
}

// GetEmbeddingsGroups is a helper method to define mock.On call
func (_e *MockQueryResult_Expecter) GetEmbeddingsGroups() *MockQueryResult_GetEmbeddingsGroups_Call {
	return &MockQueryResult_GetEmbeddingsGroups_Call{Call: _e.mock.On("GetEmbeddingsGroups")}
}

func (_c *MockQueryResult_GetEmbeddingsGroups_Call) Run(run func()) *MockQueryResult_GetEmbeddingsGroups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockQueryResult_GetEmbeddingsGroups_Call) Return(_a0 []embeddings.Embeddings) *MockQueryResult_GetEmbeddingsGroups_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQueryResult_GetEmbeddingsGroups_Call) RunAndReturn(run func() []embeddings.Embeddings) *MockQueryResult_GetEmbeddingsGroups_Call {
	_c.Call.Return(run)
	return _c
}

// GetIDGroups provides a mock function with no fields
func (_m *MockQueryResult) GetIDGroups() []v2.DocumentIDs {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetIDGroups")
	}

	var r0 []v2.DocumentIDs
	if rf, ok := ret.Get(0).(func() []v2.DocumentIDs); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]v2.DocumentIDs)
		}
	}

	return r0
}

// MockQueryResult_GetIDGroups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIDGroups'
type MockQueryResult_GetIDGroups_Call struct {
	*mock.Call
}

// GetIDGroups is a helper method to define mock.On call
func (_e *MockQueryResult_Expecter) GetIDGroups() *MockQueryResult_GetIDGroups_Call {
	return &MockQueryResult_GetIDGroups_Call{Call: _e.mock.On("GetIDGroups")}
}

func (_c *MockQueryResult_GetIDGroups_Call) Run(run func()) *MockQueryResult_GetIDGroups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockQueryResult_GetIDGroups_Call) Return(_a0 []v2.DocumentIDs) *MockQueryResult_GetIDGroups_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQueryResult_GetIDGroups_Call) RunAndReturn(run func() []v2.DocumentIDs) *MockQueryResult_GetIDGroups_Call {
	_c.Call.Return(run)
	return _c
}

// GetMetadatasGroups provides a mock function with no fields
func (_m *MockQueryResult) GetMetadatasGroups() []v2.DocumentMetadatas {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetMetadatasGroups")
	}

	var r0 []v2.DocumentMetadatas
	if rf, ok := ret.Get(0).(func() []v2.DocumentMetadatas); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]v2.DocumentMetadatas)
		}
	}

	return r0
}

// MockQueryResult_GetMetadatasGroups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMetadatasGroups'
type MockQueryResult_GetMetadatasGroups_Call struct {
	*mock.Call
}

// GetMetadatasGroups is a helper method to define mock.On call
func (_e *MockQueryResult_Expecter) GetMetadatasGroups() *MockQueryResult_GetMetadatasGroups_Call {
	return &MockQueryResult_GetMetadatasGroups_Call{Call: _e.mock.On("GetMetadatasGroups")}
}

func (_c *MockQueryResult_GetMetadatasGroups_Call) Run(run func()) *MockQueryResult_GetMetadatasGroups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockQueryResult_GetMetadatasGroups_Call) Return(_a0 []v2.DocumentMetadatas) *MockQueryResult_GetMetadatasGroups_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQueryResult_GetMetadatasGroups_Call) RunAndReturn(run func() []v2.DocumentMetadatas) *MockQueryResult_GetMetadatasGroups_Call {
	_c.Call.Return(run)
	return _c
}

// ToRecordsGroups provides a mock function with no fields
func (_m *MockQueryResult) ToRecordsGroups() []v2.Records {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ToRecordsGroups")
	}

	var r0 []v2.Records
	if rf, ok := ret.Get(0).(func() []v2.Records); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]v2.Records)
		}
	}

	return r0
}

// MockQueryResult_ToRecordsGroups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ToRecordsGroups'
type MockQueryResult_ToRecordsGroups_Call struct {
	*mock.Call
}

// ToRecordsGroups is a helper method to define mock.On call
func (_e *MockQueryResult_Expecter) ToRecordsGroups() *MockQueryResult_ToRecordsGroups_Call {
	return &MockQueryResult_ToRecordsGroups_Call{Call: _e.mock.On("ToRecordsGroups")}
}

func (_c *MockQueryResult_ToRecordsGroups_Call) Run(run func()) *MockQueryResult_ToRecordsGroups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockQueryResult_ToRecordsGroups_Call) Return(_a0 []v2.Records) *MockQueryResult_ToRecordsGroups_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQueryResult_ToRecordsGroups_Call) RunAndReturn(run func() []v2.Records) *MockQueryResult_ToRecordsGroups_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockQueryResult creates a new instance of MockQueryResult. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockQueryResult(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockQueryResult {
	mock := &MockQueryResult{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
