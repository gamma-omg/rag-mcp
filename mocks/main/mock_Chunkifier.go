// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// MockChunkifier is an autogenerated mock type for the Chunkifier type
type MockChunkifier struct {
	mock.Mock
}

type MockChunkifier_Expecter struct {
	mock *mock.Mock
}

func (_m *MockChunkifier) EXPECT() *MockChunkifier_Expecter {
	return &MockChunkifier_Expecter{mock: &_m.Mock}
}

// Chunkify provides a mock function with given fields: text
func (_m *MockChunkifier) Chunkify(text string) []string {
	ret := _m.Called(text)

	if len(ret) == 0 {
		panic("no return value specified for Chunkify")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(text)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// MockChunkifier_Chunkify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Chunkify'
type MockChunkifier_Chunkify_Call struct {
	*mock.Call
}

// Chunkify is a helper method to define mock.On call
//   - text string
func (_e *MockChunkifier_Expecter) Chunkify(text interface{}) *MockChunkifier_Chunkify_Call {
	return &MockChunkifier_Chunkify_Call{Call: _e.mock.On("Chunkify", text)}
}

func (_c *MockChunkifier_Chunkify_Call) Run(run func(text string)) *MockChunkifier_Chunkify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockChunkifier_Chunkify_Call) Return(_a0 []string) *MockChunkifier_Chunkify_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockChunkifier_Chunkify_Call) RunAndReturn(run func(string) []string) *MockChunkifier_Chunkify_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockChunkifier creates a new instance of MockChunkifier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockChunkifier(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockChunkifier {
	mock := &MockChunkifier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
