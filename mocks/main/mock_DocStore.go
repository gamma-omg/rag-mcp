// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	docstore "github.com/gamma-omg/rag-mcp/docstore"
	mock "github.com/stretchr/testify/mock"
)

// MockDocStore is an autogenerated mock type for the DocStore type
type MockDocStore struct {
	mock.Mock
}

type MockDocStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDocStore) EXPECT() *MockDocStore_Expecter {
	return &MockDocStore_Expecter{mock: &_m.Mock}
}

// Forget provides a mock function with given fields: ctx, doc
func (_m *MockDocStore) Forget(ctx context.Context, doc docstore.InjestedDoc) error {
	ret := _m.Called(ctx, doc)

	if len(ret) == 0 {
		panic("no return value specified for Forget")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, docstore.InjestedDoc) error); ok {
		r0 = rf(ctx, doc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDocStore_Forget_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Forget'
type MockDocStore_Forget_Call struct {
	*mock.Call
}

// Forget is a helper method to define mock.On call
//   - ctx context.Context
//   - doc docstore.InjestedDoc
func (_e *MockDocStore_Expecter) Forget(ctx interface{}, doc interface{}) *MockDocStore_Forget_Call {
	return &MockDocStore_Forget_Call{Call: _e.mock.On("Forget", ctx, doc)}
}

func (_c *MockDocStore_Forget_Call) Run(run func(ctx context.Context, doc docstore.InjestedDoc)) *MockDocStore_Forget_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(docstore.InjestedDoc))
	})
	return _c
}

func (_c *MockDocStore_Forget_Call) Return(_a0 error) *MockDocStore_Forget_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDocStore_Forget_Call) RunAndReturn(run func(context.Context, docstore.InjestedDoc) error) *MockDocStore_Forget_Call {
	_c.Call.Return(run)
	return _c
}

// GetInjested provides a mock function with given fields: ctx
func (_m *MockDocStore) GetInjested(ctx context.Context) ([]docstore.InjestedDoc, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetInjested")
	}

	var r0 []docstore.InjestedDoc
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]docstore.InjestedDoc, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []docstore.InjestedDoc); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]docstore.InjestedDoc)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDocStore_GetInjested_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInjested'
type MockDocStore_GetInjested_Call struct {
	*mock.Call
}

// GetInjested is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockDocStore_Expecter) GetInjested(ctx interface{}) *MockDocStore_GetInjested_Call {
	return &MockDocStore_GetInjested_Call{Call: _e.mock.On("GetInjested", ctx)}
}

func (_c *MockDocStore_GetInjested_Call) Run(run func(ctx context.Context)) *MockDocStore_GetInjested_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockDocStore_GetInjested_Call) Return(_a0 []docstore.InjestedDoc, _a1 error) *MockDocStore_GetInjested_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDocStore_GetInjested_Call) RunAndReturn(run func(context.Context) ([]docstore.InjestedDoc, error)) *MockDocStore_GetInjested_Call {
	_c.Call.Return(run)
	return _c
}

// Injest provides a mock function with given fields: ctx, doc
func (_m *MockDocStore) Injest(ctx context.Context, doc docstore.Doc) error {
	ret := _m.Called(ctx, doc)

	if len(ret) == 0 {
		panic("no return value specified for Injest")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, docstore.Doc) error); ok {
		r0 = rf(ctx, doc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDocStore_Injest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Injest'
type MockDocStore_Injest_Call struct {
	*mock.Call
}

// Injest is a helper method to define mock.On call
//   - ctx context.Context
//   - doc docstore.Doc
func (_e *MockDocStore_Expecter) Injest(ctx interface{}, doc interface{}) *MockDocStore_Injest_Call {
	return &MockDocStore_Injest_Call{Call: _e.mock.On("Injest", ctx, doc)}
}

func (_c *MockDocStore_Injest_Call) Run(run func(ctx context.Context, doc docstore.Doc)) *MockDocStore_Injest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(docstore.Doc))
	})
	return _c
}

func (_c *MockDocStore_Injest_Call) Return(_a0 error) *MockDocStore_Injest_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDocStore_Injest_Call) RunAndReturn(run func(context.Context, docstore.Doc) error) *MockDocStore_Injest_Call {
	_c.Call.Return(run)
	return _c
}

// Retrieve provides a mock function with given fields: ctx, query
func (_m *MockDocStore) Retrieve(ctx context.Context, query string) ([]docstore.SearchResult, error) {
	ret := _m.Called(ctx, query)

	if len(ret) == 0 {
		panic("no return value specified for Retrieve")
	}

	var r0 []docstore.SearchResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]docstore.SearchResult, error)); ok {
		return rf(ctx, query)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []docstore.SearchResult); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]docstore.SearchResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDocStore_Retrieve_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Retrieve'
type MockDocStore_Retrieve_Call struct {
	*mock.Call
}

// Retrieve is a helper method to define mock.On call
//   - ctx context.Context
//   - query string
func (_e *MockDocStore_Expecter) Retrieve(ctx interface{}, query interface{}) *MockDocStore_Retrieve_Call {
	return &MockDocStore_Retrieve_Call{Call: _e.mock.On("Retrieve", ctx, query)}
}

func (_c *MockDocStore_Retrieve_Call) Run(run func(ctx context.Context, query string)) *MockDocStore_Retrieve_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockDocStore_Retrieve_Call) Return(_a0 []docstore.SearchResult, _a1 error) *MockDocStore_Retrieve_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDocStore_Retrieve_Call) RunAndReturn(run func(context.Context, string) ([]docstore.SearchResult, error)) *MockDocStore_Retrieve_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDocStore creates a new instance of MockDocStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDocStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDocStore {
	mock := &MockDocStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
